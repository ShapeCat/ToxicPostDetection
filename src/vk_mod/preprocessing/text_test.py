import pytest
from .text import TextPreprocessor


def test_default_initialization_success():
    preprocessor = TextPreprocessor()
    assert preprocessor.mention_placeholder == "–£–ü–û–ú–Ø–ù–ê–ù–ò–ï"
    assert preprocessor.link_placeholder == "–°–°–´–õ–ö–ê"
    assert preprocessor.encoding == "utf-8"


def test_custom_initialization_success():
    custom_link_placeholder = "LINK"
    custom_mention_placeholder = "MENTION"
    custom_encoding = "ascii"
    preprocessor = TextPreprocessor(
            link_placeholder=custom_link_placeholder, 
            mention_placeholder=custom_mention_placeholder,
            encoding=custom_encoding
        )
    assert preprocessor.link_placeholder == custom_link_placeholder
    assert preprocessor.mention_placeholder == custom_mention_placeholder
    assert preprocessor.encoding == custom_encoding


@pytest.mark.parametrize('encoding, input_data, expected', [
    ("cp1251", "–¶–µ–Ω–∞: ¬•1000", "–¶–µ–Ω–∞: 1000"),
    ('utf-8', "–ü—Ä–∏–≤–µ—Ç! ‰Ω†Â•Ω! üòä", "–ü—Ä–∏–≤–µ—Ç! ‰Ω†Â•Ω! üòä")
])
def test_remove_unknown_symbols_success(encoding, input_data, expected):
    preprocessor = TextPreprocessor(encoding=encoding)
    result = preprocessor._remove_unknown_symbols(input_data)
    assert result == expected


@pytest.mark.parametrize('input_data, expected', [
    ("–ü—Ä–∏–≤–µ—Ç üòä", "–ü—Ä–∏–≤–µ—Ç "),
    ("Hello üòÇ", "Hello ")
])
def test_remove_emoji_success(input_data, expected):
    preprocessor = TextPreprocessor()
    result = preprocessor._remove_emoji(input_data)
    assert result == expected


@pytest.mark.parametrize('placeholder, input_data, expected', [
    ("default", "@user –ø—Ä–∏–≤–µ—Ç", "–£–ü–û–ú–Ø–ù–ê–ù–ò–ï –ø—Ä–∏–≤–µ—Ç"),
    ("MENTION", "Hello @user", "Hello MENTION")
])
def test_replace_mentions_success(placeholder, input_data, expected):
    if placeholder != "default":
        preprocessor = TextPreprocessor(mention_placeholder=placeholder)
    else:
        preprocessor = TextPreprocessor()
    result = preprocessor._replace_mentions(input_data)
    assert result == expected


@pytest.mark.parametrize('placeholder, input_data, expected', [
    ("default", "–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ https://example.com", "–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –°–°–´–õ–ö–ê"),
    ("default", "–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ http://test.ru", "–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –°–°–´–õ–ö–ê"),
    ("LINK", "Visit http://test.ru", "Visit LINK")
])
def test_replace_links_success(placeholder, input_data, expected):
    if placeholder != "default":
        preprocessor = TextPreprocessor(link_placeholder=placeholder)
    else:
        preprocessor = TextPreprocessor()
    result = preprocessor._replace_links(input_data)
    assert result == expected


@pytest.mark.parametrize("input_data, expected", [
        (None, ""),
        (123, ""),
        ([], ""),
        ("–¢–µ–∫—Å—Ç", "–¢–µ–∫—Å—Ç"),
        (" @me –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞ http://site.com üòä! ¬•", "–£–ü–û–ú–Ø–ù–ê–ù–ò–ï –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞ –°–°–´–õ–ö–ê ! ¬•")
])
def test_clean_success(input_data, expected):
    preprocessor = TextPreprocessor()
    assert preprocessor.clean(input_data) == expected
